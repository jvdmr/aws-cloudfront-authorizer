@startuml

participant "Possibly different browser" as browser
participant "Restricted site\nCloudFront" as stagcf
participant "Restricted site" as stagorigin
participant "vrt authorizer" as auth

group Set cookies

browser -> auth: GET /grant_access?token=JWT(username, domains, exp)
note right of auth: grant_access.py\nset cookie on authorizer domain
browser <- auth: 200 HTML with links per domain\nSet-Cookie: vrt_authorizer_access=JWT(username, domains, exp)

end

group Visit restricted site

alt First visit of domain-name
browser -> stagcf: GET domain-name/whatever
note right of stagcf: λ@E: check Cookie:-header
browser <- stagcf: 302 authorizer/verify_access?return_to=domain-name/whatever

browser -> auth: GET authorizer/verify_access?return_to=domain-name/whatever\nCookie: vrt_authorizer_access=JWT(username, domains, exp)
note right of auth: verify_access.py\ncheck cookie set on authorizer domain, convert to query parameter
browser <- auth: 302 domain-name/auth-UUID/set-cookie?domain=domain-name&token=JWT()&return_to=domain-name/whatever

browser -> stagcf: GET domain-name/auth-UUID/set-cookie?domain=domain-name&token=JWT()&return_to=domain-name/whatever
stagcf -> auth: GET domain-name/auth-UUID/set-cookie?domain=domain-name&token=JWT()&return_to=domain-name/whatever
note right of auth: set_cookie.py
stagcf <- auth: 302 domain-name/whatever\nSet-Cookie: CloudFront-Policy=xxx\nSet-Cookie: CloudFront-Signature=xxx
browser <- stagcf: 302 domain-name/whatever\nSet-Cookie: CloudFront-Policy=xxx\nSet-Cookie: CloudFront-Signature=xxx
end

browser -> stagcf: GET domain-name/whatever\nCookie: CloudFront-Policy=xxx
note right of stagcf: λ@E: check Cookie:-header
stagcf -> stagorigin:  GET domain-name/whatever\nCookie: CloudFront-Policy=xxx
stagcf <- stagorigin: 200
browser <- stagcf: 200

end

@enduml
