@startuml

participant browser
participant "vrt authorizer" as auth
participant "Cognito" as cognito

group Initial request

alt Not logged in

browser -> auth: GET /
note right of auth: index.py
browser <- auth: 302 cognito

browser --> cognito: authenticate
...authentication...
browser <- cognito: 302 https://authorizer/?code=12345

browser -> auth: GET /?code=12345
note right of auth: index.py
hnote over auth: verify code and get username
auth -> cognito: POST /oauth2/cognito_token: code
auth <- cognito: id_token, access_token, refresh_token
hnote over auth: verify id_token, convert to JWT
browser <- auth: 200 HTML + JS\nSet-Cookie: vrt_authorizer_login=JWT(username)

else Logged in

browser -> auth: GET /\nCookie: vrt_authorizer_login=JWT(username)
note right of auth: index.py
browser <- auth: 200 HTML + JS

end

browser -> auth: XHR: GET /domain_list\nCookie: vrt_authorizer_login=JWT(username)
note right of auth: domain_list.py
browser <- auth: 200 JSON

end


note over browser: User selects domains & duration


group Request token

browser -> auth: POST /request_access\nCookie: vrt_authorizer_login=JWT(username)\nData: exp=1234&domain1=checked&domain2=checked&...
note right of auth: request_access.py
browser <- auth: 200 URL_from(JWT(username, domains, exp))

end


note over browser
    Present link to user
    either to visit themselves
    or to copy/paste it to a 3rd party
end note

@enduml
